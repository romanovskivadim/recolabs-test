{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Professional\\\\Documents\\\\working\\\\web\\\\recolabs-test\\\\src\\\\components\\\\pages\\\\processes\\\\view.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Accordion, Button, Card, GridArea, Head, Input, PageHeader, Sidebar, StandartTitle, TextArea } from '@/components/common';\nimport processes from '@/mock-files/processes.json';\nimport processesLogo from \"@/assets/images/processes-black.svg\";\nimport './styles.scss';\nimport api from '@/services/api';\nimport { API, FORM_ERROR_MESSAGES } from '@/consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n;\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(FORM_ERROR_MESSAGES.REQUIRED)\n});\n\nfunction Processes(props) {\n  _s();\n\n  const [processesData, setProcessesData] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const formValues = {\n    name: '',\n    teams: '',\n    domains: '',\n    users: '',\n    relatedTerms: '',\n    description: ''\n  };\n\n  const getData = async () => {\n    try {\n      const result = await api.get(API.PROCESSES.GET_METADATA);\n      setProcessesData(result.data.mds);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const createProcess = async values => {\n    const newProcess = {\n      md: {\n        anchors: {\n          domains: values.domains.split(','),\n          relatedTerms: values.relatedTerms.split(','),\n          teams: values.teams.split(','),\n          users: values.users.split(',')\n        },\n        description: values.description,\n        iconUrl: \"https://i.imgur.com/GptSzgL.png\",\n        id: new Date().getMilliseconds(),\n        name: values.name\n      }\n    };\n\n    try {\n      const result = await api.post(API.PROCESSES.GET_METADATA, newProcess);\n      setProcessesData(result.data.mds);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      title: \"Home Page\",\n      description: \"General content about the site\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [isOpen && /*#__PURE__*/_jsxDEV(Sidebar, {\n        handleClose: () => setIsOpen(false),\n        title: \"Create New Proces\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          validationSchema: validationSchema,\n          onSubmit: (values, _ref) => {\n            let {\n              setSubmitting\n            } = _ref;\n            createProcess(values);\n            setSubmitting(false);\n          },\n          initialValues: formValues,\n          children: _ref2 => {\n            let {\n              handleSubmit\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: handleSubmit,\n                className: \"process-form\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  name: \"name\",\n                  placeholder: \"Process Name (mandatory)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"process-form-text\",\n                  children: \"Select one item from thie list below and provide us with the information we need in order to create your new process.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Relevant user groups\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"teams\",\n                    placeholder: \"Add at least 2 of the user groups associated with this process, separated by commas\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Relevant domains\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"domains\",\n                    placeholder: \"Domains\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Relevant usernames\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"users\",\n                    placeholder: \"Users\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 127,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Related terms\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"relatedTerms\",\n                    placeholder: \"Related terms\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n                  name: \"description\",\n                  placeholder: \"Process Description (Optional)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"process-form-btn-container\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    handleClick: handleSubmit,\n                    text: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this)\n            }, void 0, false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PageHeader, {\n        title: \"Process Library\",\n        icon: processesLogo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"processes-page\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processes-page_content-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processes-page_title-container\",\n            children: /*#__PURE__*/_jsxDEV(StandartTitle, {\n              text: \"My processes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processes-page_top\",\n            children: /*#__PURE__*/_jsxDEV(GridArea, {\n              rows: Math.ceil(processes.length / 3),\n              columns: 3,\n              children: processesData.map(item => /*#__PURE__*/_jsxDEV(Card, {\n                title: item.name,\n                text: item.description,\n                icon: item.iconUrl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processes-page_right\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            text: \"Create new\",\n            handleClick: () => setIsOpen(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Processes, \"+qu8Ooa/uuucYE8lfOQZxrHUSqU=\");\n\n_c = Processes;\nexport default Processes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Processes\");","map":{"version":3,"sources":["C:/Users/Professional/Documents/working/web/recolabs-test/src/components/pages/processes/view.tsx"],"names":["React","useEffect","useState","Formik","Yup","Accordion","Button","Card","GridArea","Head","Input","PageHeader","Sidebar","StandartTitle","TextArea","processes","api","API","FORM_ERROR_MESSAGES","validationSchema","object","shape","name","string","required","REQUIRED","Processes","props","processesData","setProcessesData","isOpen","setIsOpen","formValues","teams","domains","users","relatedTerms","description","getData","result","get","PROCESSES","GET_METADATA","data","mds","e","console","error","createProcess","values","newProcess","md","anchors","split","iconUrl","id","Date","getMilliseconds","post","setSubmitting","handleSubmit","processesLogo","Math","ceil","length","map","item"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport {\n  Accordion,\n  Button,\n  Card,\n  GridArea,\n  Head,\n  Input,\n  PageHeader,\n  Sidebar,\n  StandartTitle,\n  TextArea,\n} from '@/components/common';\nimport processes from '@/mock-files/processes.json';\nimport processesLogo from '@/assets/images/processes-black.svg';\nimport './styles.scss';\nimport api from '@/services/api';\nimport { API, FORM_ERROR_MESSAGES } from '@/consts';\nimport { IMDSProcesses } from '@/models';\n\ninterface IFormValuesType {\n  name: string,\n  teams: string,\n  domains: string,\n  users: string,\n  relatedTerms: string,\n  description: string,\n};\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(FORM_ERROR_MESSAGES.REQUIRED),\n});\n\nfunction Processes(props: RouteComponentProps): ReactElement {\n\n  const [processesData, setProcessesData] = useState<IMDSProcesses[]>([]);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const formValues = {\n    name: '',\n    teams: '',\n    domains: '',\n    users: '',\n    relatedTerms: '',\n    description: '',\n  };\n\n  const getData = async () => {\n    try {\n      const result = await api.get<{ mds: IMDSProcesses[] }>(API.PROCESSES.GET_METADATA);\n      setProcessesData(result.data.mds);\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const createProcess = async (values: IFormValuesType) => {\n    const newProcess = {\n      md: {\n        anchors: {\n          domains: values.domains.split(','),\n          relatedTerms: values.relatedTerms.split(','),\n          teams: values.teams.split(','),\n          users: values.users.split(','),\n        },\n        description: values.description,\n        iconUrl: \"https://i.imgur.com/GptSzgL.png\",\n        id: new Date().getMilliseconds(),\n        name: values.name,\n      }\n    }\n    try {\n      const result = await api.post<{ mds: IMDSProcesses[] }>(API.PROCESSES.GET_METADATA, newProcess);\n      setProcessesData(result.data.mds);\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  useEffect(() => {\n    getData();\n  }, [])\n\n  return (\n    <>\n      <Head\n        title=\"Home Page\"\n        description=\"General content about the site\"\n      />\n      <main>\n        {isOpen && (\n          <Sidebar handleClose={() => setIsOpen(false)} title='Create New Proces'>\n            <Formik\n              validationSchema={validationSchema}\n              onSubmit={(values, { setSubmitting }) => {\n                createProcess(values);\n                setSubmitting(false);\n              }}\n              initialValues={formValues}\n            >\n              {({ handleSubmit }) => (\n                <>\n                  <form onSubmit={handleSubmit} className='process-form'>\n                    <Input type=\"text\" name=\"name\" placeholder='Process Name (mandatory)' />\n                    <div className='process-form-text'>\n                      Select one item from thie list below and provide us with\n                      the information we need in order to create your new process.\n                    </div>\n                    <Accordion title='Relevant user groups'>\n                      <TextArea\n                        name='teams'\n                        placeholder='Add at least 2 of the user groups associated with this process, separated by commas'\n                      />\n                    </Accordion>\n                    <Accordion title='Relevant domains'>\n                      <TextArea\n                        name='domains'\n                        placeholder='Domains'\n                      />\n                    </Accordion>\n                    <Accordion title='Relevant usernames'>\n                      <TextArea\n                        name='users'\n                        placeholder='Users'\n                      />\n                    </Accordion>\n                    <Accordion title='Related terms'>\n                      <TextArea\n                        name='relatedTerms'\n                        placeholder='Related terms'\n                      />\n                    </Accordion>\n                    <TextArea\n                      name='description'\n                      placeholder='Process Description (Optional)'\n                    />\n                    <div className='process-form-btn-container'>\n                      <Button handleClick={handleSubmit} text='Save' />\n                    </div>\n                  </form>\n                </>\n              )}\n            </Formik>\n          </Sidebar>\n        )}\n        <PageHeader title='Process Library' icon={processesLogo} />\n        <section className=\"processes-page\">\n          <div className='processes-page_content-container'>\n            <div className='processes-page_title-container'>\n              <StandartTitle text='My processes' />\n            </div>\n            <div className='processes-page_top'>\n              <GridArea rows={Math.ceil(processes.length / 3)} columns={3}>\n                {processesData.map((item) => (\n                  <Card title={item.name} text={item.description} icon={item.iconUrl} />\n                ))}\n              </GridArea>\n            </div>\n          </div>\n          <div className='processes-page_right'>\n            <Button text='Create new' handleClick={() => setIsOpen(true)} />\n          </div>\n        </section>\n      </main>\n    </>\n  );\n}\n\nexport default Processes;\n"]},"metadata":{},"sourceType":"module"}