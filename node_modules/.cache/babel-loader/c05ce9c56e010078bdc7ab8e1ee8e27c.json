{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Professional\\\\Documents\\\\working\\\\web\\\\recolabs-test\\\\src\\\\components\\\\pages\\\\processes\\\\components\\\\view.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport api from '@/services/api';\nimport { Accordion, Button, Input, Sidebar, TextArea } from '@/components/common';\nimport { API, FORM_ERROR_MESSAGES } from '@/consts';\nimport './styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n;\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(FORM_ERROR_MESSAGES.REQUIRED),\n  teams: Yup.string().test('oneOfRequired', `${FORM_ERROR_MESSAGES.ONE_OF_REQUIRED}`, function () {\n    return this.parent.teams || this.parent.domains || this.parent.users || this.parent.relatedTerms;\n  }),\n  domains: Yup.string().test('oneOfRequired', `${FORM_ERROR_MESSAGES.ONE_OF_REQUIRED}`, function () {\n    return this.parent.teams || this.parent.domains || this.parent.users || this.parent.relatedTerms;\n  }),\n  users: Yup.string().test('oneOfRequired', `${FORM_ERROR_MESSAGES.ONE_OF_REQUIRED}`, function () {\n    return this.parent.teams || this.parent.domains || this.parent.users || this.parent.relatedTerms;\n  }),\n  relatedTerms: Yup.string().test('oneOfRequired', `${FORM_ERROR_MESSAGES.ONE_OF_REQUIRED}`, function () {\n    return this.parent.teams || this.parent.domains || this.parent.users || this.parent.relatedTerms;\n  }),\n  description: Yup.string()\n});\n\nfunction ProcessesSidebar(_ref) {\n  _s();\n\n  let {\n    getData,\n    handleClose\n  } = _ref;\n  const [formValues, setFormValues] = useState({\n    name: '',\n    teams: '',\n    domains: '',\n    users: '',\n    relatedTerms: '',\n    description: ''\n  });\n\n  const createProcess = async values => {\n    const newProcess = {\n      'md': {\n        'anchors': {\n          'domains': values.domains.split(','),\n          'relatedTerms': values.relatedTerms.split(','),\n          'teams': values.teams.split(','),\n          'users': values.users.split(',')\n        },\n        'description': values.description,\n        'iconUrl': 'https://i.imgur.com/GptSzgL.png',\n        'id': new Date().getMilliseconds().toString(),\n        'name': values.name\n      }\n    };\n\n    try {\n      await api.post(API.PROCESSES.GET_METADATA, newProcess);\n      setFormValues({\n        name: '',\n        teams: '',\n        domains: '',\n        users: '',\n        relatedTerms: '',\n        description: ''\n      });\n      handleClose();\n      getData();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sidebar, {\n    handleClose: handleClose,\n    title: \"Create New Proces\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: validationSchema,\n      onSubmit: (values, _ref2) => {\n        let {\n          setSubmitting\n        } = _ref2;\n        createProcess(values);\n        setSubmitting(false);\n      },\n      initialValues: formValues,\n      children: _ref3 => {\n        let {\n          handleSubmit,\n          errors,\n          touched\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            className: \"process-form\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"name\",\n              placeholder: \"Process Name (mandatory)\",\n              helperText: errors.name,\n              touched: touched.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"process-form-text\",\n              children: \"Select one item from thie list below and provide us with the information we need in order to create your new process.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"process-form-error-container\",\n              children: errors.domains || errors.name || errors.relatedTerms || errors.teams\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n              title: \"Relevant user groups\",\n              children: /*#__PURE__*/_jsxDEV(TextArea, {\n                name: \"teams\",\n                placeholder: \"Add at least 2 of the user groups associated with this process, separated by commas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n              title: \"Relevant domains\",\n              children: /*#__PURE__*/_jsxDEV(TextArea, {\n                name: \"domains\",\n                placeholder: \"Add at least 2 outside Domains (3rd-Paries) associated with this process, separated by commas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n              title: \"Relevant usernames\",\n              children: /*#__PURE__*/_jsxDEV(TextArea, {\n                name: \"users\",\n                placeholder: \"Add at least one username associated with this process, separated by commas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n              title: \"Related terms\",\n              children: /*#__PURE__*/_jsxDEV(TextArea, {\n                name: \"relatedTerms\",\n                placeholder: \"Add at least 2 related terms associated with this process, separated by commas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n              name: \"description\",\n              placeholder: \"Process Description (Optional)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"process-form-btn-container\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                disabled: Boolean(Object.values(errors).length),\n                noRadius: true,\n                handleClick: handleSubmit,\n                text: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProcessesSidebar, \"pxMKOFw/3YGW5PcEkgxs+TAmJUw=\");\n\n_c = ProcessesSidebar;\nexport default ProcessesSidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProcessesSidebar\");","map":{"version":3,"sources":["C:/Users/Professional/Documents/working/web/recolabs-test/src/components/pages/processes/components/view.tsx"],"names":["React","useState","Formik","Yup","api","Accordion","Button","Input","Sidebar","TextArea","API","FORM_ERROR_MESSAGES","validationSchema","object","shape","name","string","required","REQUIRED","teams","test","ONE_OF_REQUIRED","parent","domains","users","relatedTerms","description","ProcessesSidebar","getData","handleClose","formValues","setFormValues","createProcess","values","newProcess","split","Date","getMilliseconds","toString","post","PROCESSES","GET_METADATA","e","console","error","setSubmitting","handleSubmit","errors","touched","Boolean","Object","length"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from 'react';\r\nimport { RouteComponentProps } from '@reach/router';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '@/services/api';\r\n\r\nimport {\r\n  Accordion,\r\n  Button,\r\n  Input,\r\n  Sidebar,\r\n  TextArea,\r\n} from '@/components/common';\r\nimport { API, FORM_ERROR_MESSAGES } from '@/consts';\r\nimport './styles.scss';\r\n\r\ninterface IFormValuesType {\r\n  name: string,\r\n  teams: string,\r\n  domains: string,\r\n  users: string,\r\n  relatedTerms: string,\r\n  description: string,\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string().required(FORM_ERROR_MESSAGES.REQUIRED),\r\n  teams: Yup.string().test(\r\n    'oneOfRequired',\r\n    `${FORM_ERROR_MESSAGES.ONE_OF_REQUIRED}`,\r\n    function () {\r\n      return (this.parent.teams || this.parent.domains || this.parent.users || this.parent.relatedTerms)\r\n    }\r\n  ),\r\n  domains: Yup.string().test(\r\n    'oneOfRequired',\r\n    `${FORM_ERROR_MESSAGES.ONE_OF_REQUIRED}`,\r\n    function () {\r\n      return (this.parent.teams || this.parent.domains || this.parent.users || this.parent.relatedTerms)\r\n    }\r\n  ),\r\n  users: Yup.string().test(\r\n    'oneOfRequired',\r\n    `${FORM_ERROR_MESSAGES.ONE_OF_REQUIRED}`,\r\n    function () {\r\n      return (this.parent.teams || this.parent.domains || this.parent.users || this.parent.relatedTerms)\r\n    }\r\n  ),\r\n  relatedTerms: Yup.string().test(\r\n    'oneOfRequired',\r\n    `${FORM_ERROR_MESSAGES.ONE_OF_REQUIRED}`,\r\n    function () {\r\n      return (this.parent.teams || this.parent.domains || this.parent.users || this.parent.relatedTerms)\r\n    }\r\n  ),\r\n  description: Yup.string(),\r\n});\r\n\r\ninterface IProps {\r\n  getData: () => void;\r\n  handleClose: () => void;\r\n}\r\n\r\nfunction ProcessesSidebar({ getData, handleClose }: IProps): ReactElement {\r\n\r\n  const [formValues, setFormValues] = useState<IFormValuesType>({\r\n    name: '',\r\n    teams: '',\r\n    domains: '',\r\n    users: '',\r\n    relatedTerms: '',\r\n    description: '',\r\n  });\r\n\r\n  const createProcess = async (values: IFormValuesType) => {\r\n    const newProcess = {\r\n      'md': {\r\n        'anchors': {\r\n          'domains': values.domains.split(','),\r\n          'relatedTerms': values.relatedTerms.split(','),\r\n          'teams': values.teams.split(','),\r\n          'users': values.users.split(','),\r\n        },\r\n        'description': values.description,\r\n        'iconUrl': 'https://i.imgur.com/GptSzgL.png',\r\n        'id': new Date().getMilliseconds().toString(),\r\n        'name': values.name,\r\n      },\r\n    };\r\n\r\n    try {\r\n      await api.post(API.PROCESSES.GET_METADATA, newProcess);\r\n      setFormValues({\r\n        name: '',\r\n        teams: '',\r\n        domains: '',\r\n        users: '',\r\n        relatedTerms: '',\r\n        description: '',\r\n      });\r\n      handleClose();\r\n      getData();\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Sidebar handleClose={handleClose} title='Create New Proces'>\r\n      <Formik\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          createProcess(values);\r\n          setSubmitting(false);\r\n        }}\r\n        initialValues={formValues}\r\n      >\r\n        {({ handleSubmit, errors, touched }) => (\r\n          <>\r\n            <form onSubmit={handleSubmit} className='process-form'>\r\n              <Input\r\n                type='text'\r\n                name='name'\r\n                placeholder='Process Name (mandatory)'\r\n                helperText={errors.name}\r\n                touched={touched.name}\r\n              />\r\n              <div className='process-form-text'>\r\n                Select one item from thie list below and provide us with\r\n                the information we need in order to create your new process.\r\n              </div>\r\n              <div className='process-form-error-container'>\r\n                {errors.domains || errors.name || errors.relatedTerms || errors.teams}\r\n              </div>\r\n              <Accordion title='Relevant user groups'>\r\n                <TextArea\r\n                  name='teams'\r\n                  placeholder='Add at least 2 of the user groups associated with this process, separated by commas'\r\n                />\r\n              </Accordion>\r\n              <Accordion title='Relevant domains'>\r\n                <TextArea\r\n                  name='domains'\r\n                  placeholder='Add at least 2 outside Domains (3rd-Paries) associated with this process, separated by commas'\r\n                />\r\n              </Accordion>\r\n              <Accordion title='Relevant usernames'>\r\n                <TextArea\r\n                  name='users'\r\n                  placeholder='Add at least one username associated with this process, separated by commas'\r\n                />\r\n              </Accordion>\r\n              <Accordion title='Related terms'>\r\n                <TextArea\r\n                  name='relatedTerms'\r\n                  placeholder='Add at least 2 related terms associated with this process, separated by commas'\r\n                />\r\n              </Accordion>\r\n              <TextArea\r\n                name='description'\r\n                placeholder='Process Description (Optional)'\r\n              />\r\n              <div className='process-form-btn-container'>\r\n                <Button\r\n                  disabled={Boolean(Object.values(errors).length)}\r\n                  noRadius\r\n                  handleClick={handleSubmit}\r\n                  text='Save'\r\n                />\r\n              </div>\r\n            </form>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Sidebar>\r\n  );\r\n}\r\n\r\nexport default ProcessesSidebar;\r\n"]},"metadata":{},"sourceType":"module"}