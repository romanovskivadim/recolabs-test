{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Professional\\\\Documents\\\\working\\\\web\\\\recolabs-test\\\\src\\\\components\\\\pages\\\\processes\\\\view.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport api from '@/services/api';\nimport { Accordion, Button, Card, GridArea, Head, Input, PageHeader, Sidebar, StandartTitle, TextArea } from '@/components/common';\nimport processesLogo from \"@/assets/images/processes-black.svg\";\nimport { API, FORM_ERROR_MESSAGES } from '@/consts';\nimport './styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n;\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(FORM_ERROR_MESSAGES.REQUIRED),\n  teams: Yup.string().test(function (value) {\n    const {\n      teams\n    } = this.parent;\n    if (!teams) return value != null;\n    return true;\n  }),\n  domains: Yup.string().test(function (value) {\n    const {\n      domains\n    } = this.parent;\n    if (!domains) return value != null;\n    return true;\n  }),\n  users: Yup.string().test(function (value) {\n    const {\n      users\n    } = this.parent;\n    if (!users) return value != null;\n    return true;\n  }),\n  relatedTerms: Yup.string().test(function (value) {\n    const {\n      relatedTerms\n    } = this.parent;\n    if (!relatedTerms) return value != null;\n    return true;\n  }),\n  description: Yup.string()\n});\n\nfunction Processes(props) {\n  _s();\n\n  const [processesData, setProcessesData] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [formValues, setFormValues] = useState({\n    name: '',\n    teams: '',\n    domains: '',\n    users: '',\n    relatedTerms: '',\n    description: ''\n  });\n\n  const getData = async () => {\n    try {\n      const result = await api.get(API.PROCESSES.GET_METADATA);\n      setProcessesData(result.data.mds);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const createProcess = async values => {\n    const newProcess = {\n      \"md\": {\n        \"anchors\": {\n          \"domains\": values.domains.split(','),\n          \"relatedTerms\": values.relatedTerms.split(','),\n          \"teams\": values.teams.split(','),\n          \"users\": values.users.split(',')\n        },\n        \"description\": values.description,\n        \"iconUrl\": \"https://i.imgur.com/GptSzgL.png\",\n        \"id\": new Date().getMilliseconds().toString(),\n        \"name\": values.name\n      },\n      \"reportStatus\": [{\n        \"processId\": \"processId\",\n        \"status\": \"REPORT_GENERATION_STATUS_UNSPECIFIED\",\n        \"timeRemaining\": \"timeRemaining\"\n      }, {\n        \"processId\": \"processId\",\n        \"status\": \"REPORT_GENERATION_STATUS_UNSPECIFIED\",\n        \"timeRemaining\": \"timeRemaining\"\n      }]\n    };\n\n    try {\n      await api.post(API.PROCESSES.GET_METADATA, newProcess);\n      setFormValues({\n        name: '',\n        teams: '',\n        domains: '',\n        users: '',\n        relatedTerms: '',\n        description: ''\n      });\n      setIsOpen(false);\n      getData();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      title: \"Home Page\",\n      description: \"General content about the site\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [isOpen && /*#__PURE__*/_jsxDEV(Sidebar, {\n        handleClose: () => setIsOpen(false),\n        title: \"Create New Proces\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          validationSchema: validationSchema,\n          onSubmit: (values, _ref) => {\n            let {\n              setSubmitting\n            } = _ref;\n            createProcess(values);\n            setSubmitting(false);\n          },\n          initialValues: formValues,\n          children: _ref2 => {\n            let {\n              handleSubmit,\n              errors,\n              touched\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: handleSubmit,\n                className: \"process-form\",\n                children: [errors.teams, /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  name: \"name\",\n                  placeholder: \"Process Name (mandatory)\",\n                  helperText: errors.name,\n                  touched: touched.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"process-form-text\",\n                  children: \"Select one item from thie list below and provide us with the information we need in order to create your new process.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Relevant user groups\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"teams\",\n                    placeholder: \"Add at least 2 of the user groups associated with this process, separated by commas\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Relevant domains\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"domains\",\n                    placeholder: \"Add at least 2 outside Domains (3rd-Paries) associated with this process, separated by commas\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Relevant usernames\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"users\",\n                    placeholder: \"Add at least one username associated with this process, separated by commas\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Related terms\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"relatedTerms\",\n                    placeholder: \"Add at least 2 related terms associated with this process, separated by commas\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n                  name: \"description\",\n                  placeholder: \"Process Description (Optional)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"process-form-btn-container\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    handleClick: handleSubmit,\n                    text: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 19\n              }, this)\n            }, void 0, false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PageHeader, {\n        title: \"Process Library\",\n        icon: processesLogo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"processes-page\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processes-page_content-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processes-page_title-container\",\n            children: /*#__PURE__*/_jsxDEV(StandartTitle, {\n              text: \"My processes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processes-page_top\",\n            children: /*#__PURE__*/_jsxDEV(GridArea, {\n              rows: Math.ceil(processesData.length / 3),\n              columns: 3,\n              children: processesData.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  title: item === null || item === void 0 ? void 0 : item.name,\n                  text: item === null || item === void 0 ? void 0 : item.description,\n                  icon: item === null || item === void 0 ? void 0 : item.iconUrl\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 21\n                }, this)\n              }, `${new Date().getMilliseconds()}${Math.random()}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processes-page_right\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processes-page_right-btn\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              text: \"Create new\",\n              handleClick: () => setIsOpen(true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Processes, \"1wp6xoBZ23wrxS66YS5TImKJxXk=\");\n\n_c = Processes;\nexport default Processes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Processes\");","map":{"version":3,"sources":["C:/Users/Professional/Documents/working/web/recolabs-test/src/components/pages/processes/view.tsx"],"names":["React","useEffect","useState","Formik","Yup","api","Accordion","Button","Card","GridArea","Head","Input","PageHeader","Sidebar","StandartTitle","TextArea","API","FORM_ERROR_MESSAGES","validationSchema","object","shape","name","string","required","REQUIRED","teams","test","value","parent","domains","users","relatedTerms","description","Processes","props","processesData","setProcessesData","isOpen","setIsOpen","formValues","setFormValues","getData","result","get","PROCESSES","GET_METADATA","data","mds","e","console","error","createProcess","values","newProcess","split","Date","getMilliseconds","toString","post","setSubmitting","handleSubmit","errors","touched","processesLogo","Math","ceil","length","map","item","iconUrl","random"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from 'react';\r\nimport { RouteComponentProps } from '@reach/router';\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport api from '@/services/api';\r\n\r\nimport {\r\n  Accordion,\r\n  Button,\r\n  Card,\r\n  GridArea,\r\n  Head,\r\n  Input,\r\n  PageHeader,\r\n  Sidebar,\r\n  StandartTitle,\r\n  TextArea,\r\n} from '@/components/common';\r\nimport processesLogo from '@/assets/images/processes-black.svg';\r\nimport { API, FORM_ERROR_MESSAGES } from '@/consts';\r\nimport { IMDSProcesses } from '@/models';\r\nimport './styles.scss';\r\n\r\ninterface IFormValuesType {\r\n  name: string,\r\n  teams: string,\r\n  domains: string,\r\n  users: string,\r\n  relatedTerms: string,\r\n  description: string,\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string().required(FORM_ERROR_MESSAGES.REQUIRED),\r\n  teams: Yup.string().test(function (value) {\r\n    const { teams } = this.parent;\r\n    if (!teams) return value != null\r\n    return true\r\n  }),\r\n  domains: Yup.string().test(function (value) {\r\n    const { domains } = this.parent;\r\n    if (!domains) return value != null\r\n    return true\r\n  }),\r\n  users: Yup.string().test(function (value) {\r\n    const { users } = this.parent;\r\n    if (!users) return value != null\r\n    return true\r\n  }),\r\n  relatedTerms: Yup.string().test(function (value) {\r\n    const { relatedTerms } = this.parent;\r\n    if (!relatedTerms) return value != null\r\n    return true\r\n  }),\r\n  description: Yup.string(),\r\n});\r\n\r\nfunction Processes(props: RouteComponentProps): ReactElement {\r\n\r\n  const [processesData, setProcessesData] = useState<IMDSProcesses[]>([]);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const [formValues, setFormValues] = useState<IFormValuesType>({\r\n    name: '',\r\n    teams: '',\r\n    domains: '',\r\n    users: '',\r\n    relatedTerms: '',\r\n    description: '',\r\n  });\r\n\r\n  const getData = async () => {\r\n    try {\r\n      const result = await api.get<{ mds: IMDSProcesses[] }>(API.PROCESSES.GET_METADATA);\r\n      setProcessesData(result.data.mds);\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }\r\n\r\n  const createProcess = async (values: IFormValuesType) => {\r\n    const newProcess = {\r\n      \"md\": {\r\n        \"anchors\": {\r\n          \"domains\": values.domains.split(','),\r\n          \"relatedTerms\": values.relatedTerms.split(','),\r\n          \"teams\": values.teams.split(','),\r\n          \"users\": values.users.split(','),\r\n        },\r\n        \"description\": values.description,\r\n        \"iconUrl\": \"https://i.imgur.com/GptSzgL.png\",\r\n        \"id\": new Date().getMilliseconds().toString(),\r\n        \"name\": values.name,\r\n      },\r\n      \"reportStatus\": [\r\n        {\r\n          \"processId\": \"processId\",\r\n          \"status\": \"REPORT_GENERATION_STATUS_UNSPECIFIED\",\r\n          \"timeRemaining\": \"timeRemaining\"\r\n        },\r\n        {\r\n          \"processId\": \"processId\",\r\n          \"status\": \"REPORT_GENERATION_STATUS_UNSPECIFIED\",\r\n          \"timeRemaining\": \"timeRemaining\"\r\n        }\r\n      ]\r\n    };\r\n\r\n    try {\r\n      await api.post(API.PROCESSES.GET_METADATA, newProcess);\r\n      setFormValues({\r\n        name: '',\r\n        teams: '',\r\n        domains: '',\r\n        users: '',\r\n        relatedTerms: '',\r\n        description: '',\r\n      });\r\n      setIsOpen(false);\r\n      getData();\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Head\r\n        title=\"Home Page\"\r\n        description=\"General content about the site\"\r\n      />\r\n      <main>\r\n        {isOpen && (\r\n          <Sidebar handleClose={() => setIsOpen(false)} title='Create New Proces'>\r\n            <Formik\r\n              validationSchema={validationSchema}\r\n              onSubmit={(values, { setSubmitting }) => {\r\n                createProcess(values);\r\n                setSubmitting(false);\r\n              }}\r\n              initialValues={formValues}\r\n            >\r\n              {({ handleSubmit, errors, touched }) => (\r\n                <>\r\n                  <form onSubmit={handleSubmit} className='process-form'>\r\n                    {errors.teams}\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder='Process Name (mandatory)'\r\n                      helperText={errors.name}\r\n                      touched={touched.name}\r\n                    />\r\n                    <div className='process-form-text'>\r\n                      Select one item from thie list below and provide us with\r\n                      the information we need in order to create your new process.\r\n                    </div>\r\n                    <Accordion title='Relevant user groups'>\r\n                      <TextArea\r\n                        name='teams'\r\n                        placeholder='Add at least 2 of the user groups associated with this process, separated by commas'\r\n                      />\r\n                    </Accordion>\r\n                    <Accordion title='Relevant domains'>\r\n                      <TextArea\r\n                        name='domains'\r\n                        placeholder='Add at least 2 outside Domains (3rd-Paries) associated with this process, separated by commas'\r\n                      />\r\n                    </Accordion>\r\n                    <Accordion title='Relevant usernames'>\r\n                      <TextArea\r\n                        name='users'\r\n                        placeholder='Add at least one username associated with this process, separated by commas'\r\n                      />\r\n                    </Accordion>\r\n                    <Accordion title='Related terms'>\r\n                      <TextArea\r\n                        name='relatedTerms'\r\n                        placeholder='Add at least 2 related terms associated with this process, separated by commas'\r\n                      />\r\n                    </Accordion>\r\n                    <TextArea\r\n                      name='description'\r\n                      placeholder='Process Description (Optional)'\r\n                    />\r\n                    <div className='process-form-btn-container'>\r\n                      <Button handleClick={handleSubmit} text='Save' />\r\n                    </div>\r\n                  </form>\r\n                </>\r\n              )}\r\n            </Formik>\r\n          </Sidebar>\r\n        )}\r\n        <PageHeader title='Process Library' icon={processesLogo} />\r\n        <section className=\"processes-page\">\r\n          <div className='processes-page_content-container'>\r\n            <div className='processes-page_title-container'>\r\n              <StandartTitle text='My processes' />\r\n            </div>\r\n            <div className='processes-page_top'>\r\n              <GridArea rows={Math.ceil(processesData.length / 3)} columns={3}>\r\n                {processesData.map((item) => (\r\n                  <div key={`${new Date().getMilliseconds()}${Math.random()}`}>\r\n                    <Card title={item?.name} text={item?.description} icon={item?.iconUrl} />\r\n                  </div>\r\n                ))}\r\n              </GridArea>\r\n            </div>\r\n          </div>\r\n          <div className='processes-page_right'>\r\n            <div className='processes-page_right-btn'>\r\n              <Button text='Create new' handleClick={() => setIsOpen(true)} />\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Processes;\r\n"]},"metadata":{},"sourceType":"module"}