{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Professional\\\\Documents\\\\working\\\\web\\\\recolabs-test\\\\src\\\\components\\\\pages\\\\processes\\\\view.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Accordion, Button, Card, GridArea, Head, Input, PageHeader, Sidebar, StandartTitle, TextArea } from '@/components/common';\nimport processes from '@/mock-files/processes.json';\nimport processesLogo from \"@/assets/images/processes-black.svg\";\nimport './styles.scss';\nimport api from '@/services/api';\nimport { API, FORM_ERROR_MESSAGES } from '@/consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email(FORM_ERROR_MESSAGES.EMAIL).required(FORM_ERROR_MESSAGES.REQUIRED),\n  password: Yup.string().required(FORM_ERROR_MESSAGES.REQUIRED)\n});\n\nfunction Processes(props) {\n  _s();\n\n  const [processesData, setProcessesData] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [formValues, setFormValues] = useState({\n    name: '',\n    teams: '',\n    domains: '',\n    users: '',\n    relatedTerms: '',\n    description: ''\n  });\n\n  const getData = async () => {\n    try {\n      const result = await api.get(API.PROCESSES.GET_METADATA);\n      setProcessesData(result.data.mds);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      title: \"Home Page\",\n      description: \"General content about the site\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [isOpen && /*#__PURE__*/_jsxDEV(Sidebar, {\n        handleClose: () => setIsOpen(false),\n        title: \"Create New Proces\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          validationSchema: validationSchema,\n          onSubmit: (values, _ref) => {\n            let {\n              setSubmitting\n            } = _ref;\n            // props.submitHandler && props.submitHandler(values);\n            setSubmitting(false);\n          },\n          initialValues: formValues,\n          children: _ref2 => {\n            let {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: handleSubmit,\n                className: \"process-form\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  name: \"name\",\n                  placeholder: \"Process Name (mandatory)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"process-form-text\",\n                  children: \"Select one item from thie list below and provide us with the information we need in order to create your new process.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Relevant user groups\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"teams\",\n                    placeholder: \"Add at least 2 of the user groups associated with this process, separated by commas\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Relevant domains\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"domains\",\n                    placeholder: \"Domains\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 79,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Relevant usernames\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"users\",\n                    placeholder: \"Users\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n                  title: \"Related terms\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    name: \"relatedTerms\",\n                    placeholder: \"Related terms\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n                  name: \"description\",\n                  placeholder: \"Process Description (Optional)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    text: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 19\n              }, this)\n            }, void 0, false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PageHeader, {\n        title: \"Process Library\",\n        icon: processesLogo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"processes-page\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processes-page_content-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processes-page_title-container\",\n            children: /*#__PURE__*/_jsxDEV(StandartTitle, {\n              text: \"My processes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processes-page_top\",\n            children: /*#__PURE__*/_jsxDEV(GridArea, {\n              rows: Math.ceil(processes.length / 3),\n              columns: 3,\n              children: processesData.map(item => /*#__PURE__*/_jsxDEV(Card, {\n                title: item.name,\n                text: item.description,\n                icon: item.iconUrl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processes-page_right\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            text: \"Create new\",\n            handleClick: () => setIsOpen(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Processes, \"YbXsrWFLHhrw1gseESBRMNhe2L4=\");\n\n_c = Processes;\nexport default Processes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Processes\");","map":{"version":3,"sources":["C:/Users/Professional/Documents/working/web/recolabs-test/src/components/pages/processes/view.tsx"],"names":["React","useEffect","useState","Formik","Yup","Accordion","Button","Card","GridArea","Head","Input","PageHeader","Sidebar","StandartTitle","TextArea","processes","api","API","FORM_ERROR_MESSAGES","validationSchema","object","shape","email","string","EMAIL","required","REQUIRED","password","Processes","props","processesData","setProcessesData","isOpen","setIsOpen","formValues","setFormValues","name","teams","domains","users","relatedTerms","description","getData","result","get","PROCESSES","GET_METADATA","data","mds","e","console","error","values","setSubmitting","errors","touched","handleChange","handleBlur","handleSubmit","processesLogo","Math","ceil","length","map","item","iconUrl"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { Accordion, Button, Card, GridArea, Head, Input, PageHeader, Sidebar, StandartTitle, TextArea } from '@/components/common';\nimport processes from '@/mock-files/processes.json';\nimport processesLogo from '@/assets/images/processes-black.svg';\nimport './styles.scss';\nimport api from '@/services/api';\nimport { API, FORM_ERROR_MESSAGES } from '@/consts';\nimport { IMDSProcesses } from '@/models';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email(FORM_ERROR_MESSAGES.EMAIL).required(FORM_ERROR_MESSAGES.REQUIRED),\n  password: Yup.string().required(FORM_ERROR_MESSAGES.REQUIRED),\n});\n\nfunction Processes(props: RouteComponentProps): ReactElement {\n\n  const [processesData, setProcessesData] = useState<IMDSProcesses[]>([]);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [formValues, setFormValues] = useState({\n    name: '',\n    teams: '',\n    domains: '',\n    users: '',\n    relatedTerms: '',\n    description: '',\n  })\n\n  const getData = async () => {\n    try {\n      const result = await api.get<{ mds: IMDSProcesses[] }>(API.PROCESSES.GET_METADATA);\n      setProcessesData(result.data.mds);\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  useEffect(() => {\n    getData();\n  }, [])\n\n  return (\n    <>\n      <Head\n        title=\"Home Page\"\n        description=\"General content about the site\"\n      />\n      <main>\n        {isOpen && (\n          <Sidebar handleClose={() => setIsOpen(false)} title='Create New Proces'>\n            <Formik\n              validationSchema={validationSchema}\n              onSubmit={(values, { setSubmitting }) => {\n                // props.submitHandler && props.submitHandler(values);\n                setSubmitting(false);\n              }}\n              initialValues={formValues}\n            >\n              {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                <>\n                  <form onSubmit={handleSubmit} className='process-form'>\n                    <Input type=\"text\" name=\"name\" placeholder='Process Name (mandatory)' />\n                    <div className='process-form-text'>\n                      Select one item from thie list below and provide us with\n                      the information we need in order to create your new process.\n                    </div>\n                    <Accordion title='Relevant user groups'>\n                      <TextArea\n                        name='teams'\n                        placeholder='Add at least 2 of the user groups associated with this process, separated by commas'\n                      />\n                    </Accordion>\n                    <Accordion title='Relevant domains'>\n                      <TextArea\n                        name='domains'\n                        placeholder='Domains'\n                      />\n                    </Accordion>\n                    <Accordion title='Relevant usernames'>\n                      <TextArea\n                        name='users'\n                        placeholder='Users'\n                      />\n                    </Accordion>\n                    <Accordion title='Related terms'>\n                      <TextArea\n                        name='relatedTerms'\n                        placeholder='Related terms'\n                      />\n                    </Accordion>\n                    <TextArea\n                      name='description'\n                      placeholder='Process Description (Optional)'\n                    />\n                    <div>\n                      <Button text='Save' />\n                    </div>\n                  </form>\n                </>\n              )}\n            </Formik>\n          </Sidebar>\n        )}\n        <PageHeader title='Process Library' icon={processesLogo} />\n        <section className=\"processes-page\">\n          <div className='processes-page_content-container'>\n            <div className='processes-page_title-container'>\n              <StandartTitle text='My processes' />\n            </div>\n            <div className='processes-page_top'>\n              <GridArea rows={Math.ceil(processes.length / 3)} columns={3}>\n                {processesData.map((item) => (\n                  <Card title={item.name} text={item.description} icon={item.iconUrl} />\n                ))}\n              </GridArea>\n            </div>\n          </div>\n          <div className='processes-page_right'>\n            <Button text='Create new' handleClick={() => setIsOpen(true)} />\n          </div>\n        </section>\n      </main>\n    </>\n  );\n}\n\nexport default Processes;\n"]},"metadata":{},"sourceType":"module"}